// –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø—É–∑—ã—Ä—å–∫–æ–º —á–∏—Å–ª–æ–≤–æ–≥–æ –º–∞—Å—Å–∏–≤–∞, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –ª–æ–≥-—Ñ–∞–π–ª.
// –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∫–æ–¥ –≤ –º–µ—Ç–æ–¥–µ sort –∫–ª–∞—Å—Å–∞ BubbleSort. –ú–µ—Ç–æ–¥ sort –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –æ–¥–∏–Ω –ø–∞—Ä–∞–º–µ—Ç—Ä:

// int[] arr - —á–∏—Å–ª–æ–≤–æ–π –º–∞—Å—Å–∏–≤

// –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞ –ø–æ –º–∞—Å—Å–∏–≤—É –≤–∞—à –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª 'log.txt' –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å —á–∞—Å:–º–∏–Ω—É—Ç—ã 
// {–º–∞—Å—Å–∏–≤ –Ω–∞ –¥–∞–Ω–Ω–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏}. –î–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–≥–≥–µ—Ä logger –∫–ª–∞—Å—Å–∞ BubbleSort.

// arr = new int[]{9, 4, 8, 3, 1};
// sort(arr)

// // –ü—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∏–º:
// 2023-05-19 07:53 [4, 8, 3, 1, 9]
// 2023-05-19 07:53 [4, 3, 1, 8, 9]
// 2023-05-19 07:53 [3, 1, 4, 8, 9]
// 2023-05-19 07:53 [1, 3, 4, 8, 9]
// 2023-05-19 07:53 [1, 3, 4, 8, 9]

import java.io.File;
import java.io.FileWriter;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import java.util.Arrays;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

// –ù–µ —É–¥–∞–ª—è–π—Ç–µ —ç—Ç–æ—Ç –∫–ª–∞—Å—Å - –æ–Ω –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —ç–∫—Ä–∞–Ω –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
public class BubbleSort_Printer {
  public static void main(String[] args) {
    int[] arr = {};

    if (args.length == 0) {
      // –ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –Ω–∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤–∞—Ä—å–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
      arr = new int[] { 9, 4, 8, 3, 1 };
      // arr = new int[] { 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };
      // arr = new int[] {9, 3, 4, 8, 2, 5, 7, 1, 6, 10};
      

    } else {
      arr = Arrays.stream(args[0].split(", "))
          .mapToInt(Integer::parseInt)
          .toArray();
    }

    BubbleSort ans = new BubbleSort();
    ans.sort(arr);

    try (BufferedReader br = new BufferedReader(new FileReader("log.txt"))) {
      String line;
      while ((line = br.readLine()) != null) {
        System.out.println(line);
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
  }
}

class BubbleSort {
  private static File log;
  private static FileWriter fileWriter;

  public static void sort(int[] mas) {
    int n = mas.length;
    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("YYYY-MM-DD HH:mm");
    try (PrintWriter writer = new PrintWriter(new FileWriter("log.txt"))) { // –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
      for (int i = 0; i < n; i++) {
        for (int j = 0; j < n - i - 1; j++) {
          if (mas[j] > mas[j + 1]) {
            int temp = mas[j];
            mas[j] = mas[j + 1];
            mas[j + 1] = temp;
          } else {
            if (j == n-i-2) {
              n--;
            }
          }
        }
        writer.println(dtf.format(LocalDateTime.now()) + " " + arrayToString(mas)); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      }
    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  private static String arrayToString(int[] arr) {
    StringBuilder sb = new StringBuilder();
    sb.append("[");
    for (int i = 0; i < arr.length; i++) {
      sb.append(arr[i]);
      if (i != arr.length - 1) {
        sb.append(", ");
      }
    }
    sb.append("]");
    return sb.toString();
  }
}

// //–≠—Ç–∞–ª–æ–Ω–Ω–æ–∫–µ —Ä–µ—à–∏–Ω–∏–µ 
// import java.io.IOException;
// import java.util.Arrays;
// import java.util.logging.FileHandler;
// import java.util.logging.Logger;

// class BubbleSort {
//     // –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º –≤—ã–≤–æ–¥–∞ 
//     private static Logger logger = null;

//     static {
//         System.setProperty("java.util.logging.SimpleFormatter.format",
//                 "%1$tF %1$tR %5$s %n");
//         logger = Logger.getLogger(BubbleSort.class.getName());
//     }

//     public void sort(int[] mas) {

//         configureLogger();
//         bubbleSort(mas);
//     }

//     private int[] bubbleSort(int[] mas) {
//         boolean isSorted = false;
//         int buffer;

//         while (!isSorted) {
//             isSorted = true;
//             for (int i = 0; i < mas.length - 1; i++) {
//                 if (mas[i] > mas[i + 1]) {
//                     isSorted = false;

//                     buffer = mas[i];
//                     mas[i] = mas[i + 1];
//                     mas[i + 1] = buffer;
//                 }
//             }
//             logger.info(Arrays.toString(mas));
//         }
//         return mas;
//     }

//     public void configureLogger() {
//         try {
//             FileHandler fileHandler = new FileHandler("log.txt");
//             logger.addHandler(fileHandler);
//         SimpleFormatter formatter = new SimpleFormatter();
//             fileHandler.setFormatter(formatter);
//         } catch (IOException ex) {
//             ex.printStackTrace();
//         }
//     }
// }

// public class Printer {
//     public static void main(String[] args) {
//         int[] arr = {};

//         if (args.length == 0) {
//             arr = new int[] { 9, 4, 8, 3, 1 };
//         } else {
//             arr = Arrays.stream(args[0].split(", "))
//                     .mapToInt(Integer::parseInt)
//                     .toArray();
//         }

//         BubbleSort ans = new BubbleSort();
//         ans.sort(arr);
//     }
// }

// üí° –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–Ω–µ–Ω–∏–µ–º
// üî• –ó–∞—Ä—è–∂–µ–Ω–æ 
// GeekBrains
//  & 
// IT Resume